// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// DEFINITION DES ROLES POUR PLUS DE CLARTE
enum Role {
  USER
  MERCHANT
  ADMIN
}

model User {
  id                    String    @id @default(uuid())
  email                 String    @unique
  fullName              String
  username              String    @unique
  phoneNumber           String    @unique
  hashedPassword        String    // CHAMP CORRIGE: Nom cohérent pour le mot de passe chiffré
  pinHash               String?
  avatarUrl             String?
  dateOfBirth           DateTime?
  address               String?
  isVerified            Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  role                  Role      @default(USER) // UTILISATION DE L'ENUM: Plus propre et sécurisé

  wallet                Wallet?
  profile               UserProfile?
  sentMoneyRequests     MoneyRequest[] @relation("SentRequests")
  receivedMoneyRequests MoneyRequest[] @relation("ReceivedRequests")
  merchantProfile       Merchant?
  suggestions           MerchantSuggestion[]
}

model UserProfile {
  id        String        @id @default(uuid())
  level     Int           @default(1)
  xp        Int           @default(0)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @unique
  missions  UserMission[]
}

model Wallet {
  id                   String        @id @default(uuid())
  balance              Float         @default(0)
  currency             String        @default("DZD")
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  user                 User          @relation(fields: [userId], references: [id])
  userId               String        @unique
  sentTransactions     Transaction[] @relation("SentTransactions")
  receivedTransactions Transaction[] @relation("ReceivedTransactions")
}

model Transaction {
  id          String    @id @default(uuid())
  amount      Float
  type        String
  description String?
  createdAt   DateTime  @default(now())
  sender      Wallet?   @relation("SentTransactions", fields: [senderId], references: [id])
  senderId    String?
  receiver    Wallet    @relation("ReceivedTransactions", fields: [receiverId], references: [id])
  receiverId  String
}

model Mission {
  id          String        @id @default(uuid())
  title       String
  description String
  xpReward    Int
  goal        Int
  type        String        @unique
  users       UserMission[]
}

model UserMission {
  id            String      @id @default(uuid())
  progress      Int         @default(0)
  isCompleted   Boolean     @default(false)
  completedAt   DateTime?
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
  userProfileId String
  mission       Mission     @relation(fields: [missionId], references: [id])
  missionId     String

  @@unique([userProfileId, missionId])
}

model MoneyRequest {
  id          String   @id @default(uuid())
  amount      Float
  description String?
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  requester   User     @relation("SentRequests", fields: [requesterId], references: [id])
  requesterId String
  payer       User     @relation("ReceivedRequests", fields: [payerId], references: [id])
  payerId     String
}

model Merchant {
  id          String    @id @default(uuid())
  name        String
  description String?
  category    String
  address     String?
  isApproved  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  //location    Unsupported("geometry(Point, 4326)")?
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
}

model MerchantSuggestion {
  id            String   @id @default(uuid())
  name          String
  address       String?
  category      String?
  contactName   String?
  contactPhone  String?
  notes         String?
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  suggestedBy   User     @relation(fields: [suggestedById], references: [id])
  suggestedById String
}