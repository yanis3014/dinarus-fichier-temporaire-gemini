'use client';

import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useRouter } from 'next/navigation';
import PageHeader from '@/components/layouts/PageHeader';
import Link from 'next/link';
import { CommerceSubmission } from '@/components/modals/SuggestCommerceModal';

// Type √©tendu pour les suggestions avec leur statut
interface SuggestionWithStatus extends CommerceSubmission {
  id: string;
  status: 'pending' | 'contacted' | 'added';
  createdAt: string;
  pointsEarned?: number;
}

// Fonction pour obtenir l'√©moji correspondant √† chaque cat√©gorie
const getCategoryEmoji = (category: string) => {
  const categories: Record<string, string> = {
    restaurant: 'üçΩÔ∏è',
    groceries: 'ü•¨',
    retail: 'üõçÔ∏è',
    fashion: 'üëï',
    health: 'üíä',
    tech: 'üì±',
    loisirs: 'üéÆ',
    other: 'üìå',
  };
  
  return categories[category] || 'üìå';
};

// Fonction pour obtenir la couleur correspondant √† chaque statut
const getStatusColor = (status: string) => {
  switch (status) {
    case 'pending':
      return 'bg-amber-100 text-amber-800 border-amber-200';
    case 'contacted':
      return 'bg-blue-100 text-blue-800 border-blue-200';
    case 'added':
      return 'bg-green-100 text-green-800 border-green-200';
    default:
      return 'bg-gray-100 text-gray-800 border-gray-200';
  }
};

// Fonction pour obtenir le libell√© correspondant √† chaque statut
const getStatusLabel = (status: string) => {
  switch (status) {
    case 'pending':
      return 'En attente';
    case 'contacted':
      return 'Contact√©';
    case 'added':
      return 'Ajout√©';
    default:
      return 'Inconnu';
  }
};

export default function SuggestionsHistoryPage() {
  const [suggestions, setSuggestions] = useState<SuggestionWithStatus[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const router = useRouter();

  // Simuler le chargement des donn√©es depuis une API
  useEffect(() => {
    // Dans une vraie application, ces donn√©es seraient charg√©es depuis une API
    const demoSuggestions: SuggestionWithStatus[] = [
      {
        id: '1',
        name: 'Caf√© Eco-friendly',
        address: '15 Rue des Oliviers, Alger',
        category: 'restaurant',
        contactName: 'Mohamed',
        contactPhone: '05 55 12 34 56',
        notes: 'Caf√© proposant des produits biologiques et locaux',
        status: 'added',
        createdAt: '2025-04-15',
        pointsEarned: 500
      },
      {
        id: '2',
        name: 'Bio Market',
        address: '22 Avenue de la Libert√©, Constantine',
        category: 'groceries',
        contactName: 'Amina',
        notes: '√âpicerie bio avec produits en vrac',
        status: 'contacted',
        createdAt: '2025-05-01'
      },
      {
        id: '3',
        name: 'Tech Durable',
        address: '5 Boulevard Central, Oran',
        category: 'tech',
        status: 'pending',
        createdAt: '2025-05-10'
      }
    ];
    
    // R√©cup√©rer les suggestions stock√©es dans le localStorage
    const storedSuggestions = localStorage.getItem('suggestedCommerces');
    let allSuggestions = [...demoSuggestions];
    
    if (storedSuggestions) {
      const parsedSuggestions = JSON.parse(storedSuggestions) as CommerceSubmission[];
      const mappedSuggestions: SuggestionWithStatus[] = parsedSuggestions.map((item, index) => ({
        ...item,
        id: `stored-${index}`,
        status: 'pending',
        createdAt: new Date().toISOString().split('T')[0]
      }));
      
      allSuggestions = [...mappedSuggestions, ...demoSuggestions];
    }
    
    // Simuler un d√©lai de chargement pour l'effet
    setTimeout(() => {
      setSuggestions(allSuggestions);
      setIsLoading(false);
    }, 700);
  }, []);  const router = useRouter();

  // Fonction personnalis√©e pour g√©rer le retour vers la page carte
  const handleBackToMap = () => {
    router.push('/carte');
  };

  return (
    <div className="bg-white min-h-screen pb-20">
      <PageHeader 
        title="Mes suggestions" 
        emoji="üìã" 
        showBackButton={true}
        backTo="/carte"
        onBackClick={handleBackToMap}
      />
      
      <div className="px-5">
        {isLoading ? (
          <div className="flex flex-col items-center justify-center py-12">
            <div className="w-12 h-12 border-4 border-black border-t-transparent rounded-full animate-spin"></div>
            <p className="mt-4 text-gray-600">Chargement de vos suggestions...</p>
          </div>
        ) : suggestions.length > 0 ? (
          <>
            <div className="bg-blue-50 border border-blue-100 rounded-xl p-4 mb-5">
              <div className="flex items-start">
                <span className="text-xl mr-3">üí°</span>
                <div>
                  <h3 className="font-bold text-blue-900 mb-1">Comment √ßa fonctionne ?</h3>
                  <p className="text-sm text-blue-800">
                    Chaque suggestion que vous faites est examin√©e par notre √©quipe. Si le commer√ßant rejoint Dinary, vous recevrez des points de r√©compense !
                  </p>
                </div>
              </div>
            </div>
            
            <h2 className="text-lg font-semibold mb-4">Historique de vos suggestions</h2>
            
            <div className="space-y-4">
              {suggestions.map((suggestion) => (
                <motion.div
                  key={suggestion.id}
                  className="bg-white border border-gray-200 rounded-xl p-4 shadow-sm"
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.2 }}
                >
                  <div className="flex items-start">
                    <div className="w-12 h-12 rounded-xl bg-gray-100 flex items-center justify-center text-2xl mr-3">
                      {getCategoryEmoji(suggestion.category)}
                    </div>
                    
                    <div className="flex-1">
                      <div className="flex justify-between items-start">
                        <h3 className="font-bold">{suggestion.name}</h3>
                        <span className={`text-xs px-2 py-1 rounded-full border ${getStatusColor(suggestion.status)}`}>
                          {getStatusLabel(suggestion.status)}
                        </span>
                      </div>
                      
                      <p className="text-sm text-gray-600 mt-1">{suggestion.address}</p>
                      
                      <div className="flex items-center mt-2">
                        <span className="text-xs text-gray-500">Sugg√©r√© le {suggestion.createdAt}</span>
                        
                        {suggestion.status === 'added' && suggestion.pointsEarned && (
                          <span className="ml-3 bg-green-50 text-green-800 text-xs px-2 py-1 rounded-full border border-green-200 flex items-center">
                            <span className="mr-1">üéÅ</span>
                            +{suggestion.pointsEarned} points
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </>
        ) : (
          <div className="flex flex-col items-center justify-center py-12 text-center">
            <div className="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center text-3xl mb-4">
              üìã
            </div>
            <h2 className="text-xl font-bold mb-2">Aucune suggestion</h2>
            <p className="text-gray-600 mb-5">
              Vous n'avez pas encore sugg√©r√© de commer√ßants √† ajouter sur Dinary.
            </p>
            <Link 
              href="/carte" 
              className="bg-black text-white py-3 px-6 rounded-xl font-medium"
            >
              Sugg√©rer un commer√ßant
            </Link>
          </div>
        )}
      </div>
    </div>
  );
}
